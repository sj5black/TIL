[스파르타코딩클럽] 3강. Anaconda 설치 및 라이브러리 소개📘[SCC] 바닥부터 시작하는 머신러닝/📚[스파르타코딩클럽] 바닥부터 시작하는 머신러닝 - 1주차/📕[스파르타코딩클럽] 3강. Anaconda 설치 및 라이브러리 소개Made with📕[스파르타코딩클럽] 3강. Anaconda 설치 및 라이브러리 소개[수업 목표]Anaconda 를 설치합니다머신러닝에서 사용하는 주요 라이브러리 기능을 배우고 실습합니다[목차]01. Anaconda 소개 및 설치02. 주요 라이브러리 소개conda --version
​☑️ Anaconda 주요 기능패키지 관리: conda 명령어를 사용하여 패키지를 설치, 업데이트, 제거할 수 있습니다.환경 관리: 가상 환경을 생성하고 관리할 수 있습니다.Jupyter Notebook: 웹 기반의 대화형 개발 환경을 제공합니다.Spyder: 통합 개발 환경(IDE)으로, 코드 편집기와 디버거를 포함합니다.가상환경 생성 및 관리 {5px}가상환경 생성 및 관리 ﻿​PythonCopy# 새로운 가상 환경 생성
conda create --name myenv

# 가상 환경 활성화
conda activate myenv

# 가상 환경 비활성화
conda deactivate

# 가상 환경 제거
conda remove --name myenv --all
​02. 주요 라이브러리 소개✔️머신러닝 강의에서 사용하는 주요 라이브러리를 소개드리고 간단한 실습을 진행해 봅시다1) Numpy 라이브러리 소개 ☑️ Numpy 라이브러리란?수치 계산을 위한 Python 라이브러리Numpy는 다차원 배열 객체인 ndarray를 제공벡터화 연산을 통해 빠르고 효율적인 수치 계산을 수행 가능☑️ Numpy 설치Numpy 설치 {5px}Numpy 설치 ﻿​PythonCopy# conda를 사용하여 Numpy 설치
conda install numpy

# pip를 사용하여 Numpy 설치
pip install numpy
​라이브러리는 conda 또는pip를 사용하여 설치할 수 있습니다. { conda }라이브러리는 conda 또는pip를 사용하여 설치할 수 있습니다.﻿​☑️ Numpy 주요 기능다차원 배열 객체(ndarray): 다차원 배열을 생성하고 조작할 수 있습니다.벡터화 연산: 배열 간의 연산을 빠르게 수행할 수 있습니다.수학 함수: 다양한 수학 함수를 제공합니다.☑️ Numpy 예제다차원 배열을 생성하고 기본 연산을 수행하는 예제를 실습해 봅시다Numpy 예제 {5px}Numpy 예제 ﻿​PythonCopyimport numpy as np

# 1차원 배열 생성
arr1 = np.array([1, 2, 3, 4, 5])
# 2차원 배열 생성
arr2 = np.array([[1, 2, 3], [4, 5, 6]])
# 배열의 크기 확인
print(arr1.shape)
print(arr2.shape)
# 배열의 데이터 타입 확인
print(arr1.dtype)
print(arr2.dtype)
# 배열 간의 연산
arr_sum = arr1 + arr1
arr_product = arr1 * arr1

print(arr_sum)
print(arr_product)
​2) Pandas 라이브러리 소개☑️ Pandas 라이브러리란?데이터 조작 및 분석을 위한 Python 라이브러리데이터 프레임(DataFrame)이라는 구조를 사용하여 데이터를 효율적으로 관리하고 조작 가능이 데이터 프레임이라는 구조 덕에 테이블 형식의 데이터를 다루는 데 매우 유용 합니다이 데이터 프레임이라는 구조 덕에 테이블 형식의 데이터를 다루는 데 매우 유용 합니다﻿​☑️ Pandas 설치Pandas 설치 {5px}Pandas 설치 ﻿​PythonCopy# conda를 사용하여 Pandas 설치
conda install pandas

# pip를 사용하여 Pandas 설치
pip install pandas
​☑️ Pandas 주요 기능데이터 프레임(DataFrame): 테이블 형식의 데이터를 생성하고 조작할 수 있습니다.데이터 불러오기 및 저장: CSV, 엑셀, SQL 등 다양한 형식의 데이터를 불러오고 저장할 수 있습니다.데이터 조작: 필터링, 그룹화, 병합 등 다양한 데이터 조작 기능을 제공합니다.☑️ Pandas 예제데이터프레임을 생성하고 기본 조작을 수행하는 예제를 실습해 봅시다Pandas 예제 {5px}Pandas 예제 ﻿​PythonCopyimport pandas as pd

# 데이터 프레임 생성
data = {'Name': ['Alice', 'Bob', 'Charlie'],
'Age': [25, 30, 35],
'City': ['New York', 'Los Angeles', 'Chicago']}
df = pd.DataFrame(data)
# 데이터 프레임의 첫 5행 출력
print(df.head())
# 데이터 프레임의 크기 확인
print(df.shape)
# 데이터 프레임의 컬럼명 확인
print(df.columns)
# 데이터 프레임의 데이터 타입 확인
print(df.dtypes)
# 특정 컬럼 선택
print(df['Name'])
# 조건에 맞는 행 선택
print(df[df['Age'] > 30])
​3) Scikit-learn 라이브러리 소개☑️ Scikit-learn 라이브러리란?머신러닝을 위한 Python 라이브러리다양한 머신러닝 알고리즘을 제공하며, 데이터 전처리, 모델 학습, 평가 및 예측을 위한 도구를 포함☑️ Scikit-learn 설치Scikit-learn 설치{5px}Scikit-learn 설치﻿​PythonCopy# conda를 사용하여 Scikit-learn 설치
conda install scikit-learn

# pip를 사용하여 Scikit-learn 설치
pip install scikit-learn
​☑️ Scikit-learn  주요 기능데이터 전처리: 스케일링, 인코딩, 결측값 처리 등 다양한 데이터 전처리 기능을 제공합니다.모델 학습: 회귀, 분류, 군집화 등 다양한 머신러닝 알고리즘을 제공합니다.모델 평가: 교차 검증, 성능 평가 지표 등 모델 평가를 위한 도구를 제공합니다.모델 예측: 학습된 모델을 사용하여 새로운 데이터에 대한 예측을 수행할 수 있습니다.☑️ Scikit-learn  예제Scikit-learn 예제{5px}Scikit-learn 예제﻿​PythonCopyfrom sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# 데이터 생성
X = [[1], [2], [3], [4], [5]]
y = [1, 4, 9, 16, 25]
# 데이터 분할 (훈련 데이터와 테스트 데이터)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 회귀 모델 생성 및 학습
model = LinearRegression()
model.fit(X_train, y_train)
# 예측
y_pred = model.predict(X_test)
# 모델 평가
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
​Copyright ⓒ TeamSparta All rights reserved.