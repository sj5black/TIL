데이터 변형해보기: 데이터 정렬과 병합📕인공지능을 위한 파이썬 라이브러리/📘인공지능을 위한 파이썬 라이브러리 - 4주차/1️⃣데이터 변형해보기: 데이터 정렬과 병합Made with1️⃣데이터 변형해보기: 데이터 정렬과 병합수업 목표판다스를 통해 데이터를 정렬하고 병합하는 방법에 대해 학습합니다.목차데이터 정렬데이터 병합요약데이터 정렬📚데이터를 정렬하는 것은 데이터 분석의 기본입니다. 판다스에서는 sort_values()와 sort_index()를 사용해 쉽게 데이터를 정렬할 수 있습니다.sort_values()를 사용한 값(Value) 기준 정렬특정 열의 값을 기준으로 데이터를 오름차순 또는 내림차순으로 정렬할 수 있습니다.PythonCopyimport pandas as pd

# 예시 데이터프레임 생성
data = {
'이름': ['철수', '영희', '민수', '지수'],
'나이': [25, 30, 22, 35],
'직업': ['학생', '회사원', '학생', '프리랜서']
}
df = pd.DataFrame(data)
# '나이' 기준으로 오름차순 정렬
sorted_df = df.sort_values(by='나이')
print(sorted_df)

​결과:Plain TextCopy   이름  나이       직업
2  민수   22      학생
0  철수   25      학생
1  영희   30    회사원
3  지수   35  프리랜서

​내림차순으로 정렬하려면 ascending=False를 지정하세요.PythonCopy# '나이' 기준으로 내림차순 정렬
sorted_df_desc = df.sort_values(by='나이', ascending=False)
print(sorted_df_desc)

​sort_values()를 사용한 여러 열 기준 정렬여러 열을 기준으로 정렬할 수 있습니다. 우선순위에 따라 첫 번째 열부터 정렬됩니다.PythonCopy# '직업'을 기준으로, 같은 직업 내에서 '나이' 오름차순 정렬
sorted_df_multi = df.sort_values(by=['직업', '나이'])
print(sorted_df_multi)

​sort_index()를 사용한 인덱스 기준 정렬인덱스를 기준으로 데이터를 정렬할 수 있습니다.PythonCopy# 인덱스 기준으로 정렬
sorted_index_df = df.sort_index()
print(sorted_index_df)

​내림차순으로 인덱스를 정렬하려면 ascending=False를 지정합니다.PythonCopy# 인덱스를 내림차순으로 정렬
sorted_index_df_desc = df.sort_index(ascending=False)
print(sorted_index_df_desc)

​데이터 병합📚데이터 분석 시 여러 개의 데이터를 병합하는 작업이 필요할 때가 많습니다. 판다스에서는 merge(), concat(), join()을 사용해 데이터를 병합할 수 있습니다.merge()를 사용한 데이터프레임 병합SQL의 JOIN과 유사하게 두 데이터프레임을 공통 열을 기준으로 병합합니다.PythonCopy# 예시 데이터프레임 생성
df1 = pd.DataFrame({
'이름': ['철수', '영희', '민수'],
'나이': [25, 30, 22]
})

df2 = pd.DataFrame({
'이름': ['철수', '영희', '지수'],
'직업': ['학생', '회사원', '프리랜서']
})
# '이름'을 기준으로 병합
merged_df = pd.merge(df1, df2, on='이름')
print(merged_df)

​결과:Plain TextCopy   이름  나이    직업
0  철수   25   학생
1  영희   30  회사원

​다양한 merge() 방식inner (기본값): 공통된 데이터만 병합.outer: 공통되지 않은 데이터도 포함하여 병합, 없는 값은 NaN으로 채움.left: 왼쪽 데이터프레임 기준으로 병합.right: 오른쪽 데이터프레임 기준으로 병합.PythonCopy# outer join을 사용한 병합
merged_df_outer = pd.merge(df1, df2, on='이름', how='outer')
print(merged_df_outer)

​결과:Plain TextCopy   이름   나이       직업
0  철수  25.0      학생
1  영희  30.0    회사원
2  민수  22.0      NaN
3  지수   NaN  프리랜서

​concat()을 사용한 데이터프레임 연결행(row) 또는 열(column) 단위로 데이터프레임을 연결할 수 있습니다.PythonCopy# 행 단위로 데이터프레임 연결
concat_df = pd.concat([df1, df2], axis=0)
print(concat_df)

​결과:Plain TextCopy    이름    나이       직업
0   철수  25.0       NaN
1   영희  30.0       NaN
2   민수  22.0       NaN
0   철수   NaN      학생
1   영희   NaN    회사원
2   지수   NaN  프리랜서

​열 단위로 연결하고 싶다면 axis=1을 지정하세요.PythonCopy# 열 단위로 데이터프레임 연결
concat_df_axis1 = pd.concat([df1, df2], axis=1)
print(concat_df_axis1)

​join()을 사용한 데이터프레임 병합인덱스를 기준으로 데이터프레임을 병합할 때 사용합니다.PythonCopy# 예시 데이터프레임 생성
df3 = pd.DataFrame({
'직업': ['학생', '회사원', '프리랜서'],
'연봉': [2000, 3000, 4000]
}, index=['철수', '영희', '지수'])
# 인덱스를 기준으로 병합
joined_df = df1.set_index('이름').join(df3)
print(joined_df)

​결과:Plain TextCopy      나이       직업     연봉
이름
철수     25      학생  2000.0
영희     30    회사원  3000.0
민수     22      NaN     NaN

​요약📚요약데이터 정렬은 sort_values()로 특정 열 기준으로, sort_index()로 인덱스 기준으로 정렬할 수 있습니다.데이터 병합은 merge()를 사용해 공통 열을 기준으로 병합하거나, concat()을 사용해 행 또는 열 단위로 연결할 수 있습니다.인덱스를 기준으로 병합할 때는 join()을 사용할 수 있으며, 다양한 병합 방식(inner, outer, left, right)이 지원됩니다.이제 데이터를 효율적으로 정렬하고, 필요에 따라 병합하여 더 깊이 있는 분석을 진행해보세요! 😊