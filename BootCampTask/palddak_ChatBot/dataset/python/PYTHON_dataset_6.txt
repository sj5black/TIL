판다스 사용을 위해 데이터를 불러오기와 저장하기📕인공지능을 위한 파이썬 라이브러리/📘인공지능을 위한 파이썬 라이브러리 - 3주차/1️⃣판다스 사용을 위해 데이터를 불러오기와 저장하기1️⃣판다스 사용을 위해 데이터를 불러오기와 저장하기수업 목표판다스를 이용한 데이터 불러오기 및 저장 방법에 대해서 학습합니다.목차CSV, Excel, JSON 등 다양한 형식에서 데이터 불러오기CSV 파일 불러오기Excel 파일 불러오기JSON 파일 불러오기CSV, Excel, JSON, SQL 등 다양한 형식으로 데이터 저장하기CSV 파일로 저장하기Excel 파일로 저장하기JSON 파일로 저장하기 SQL 데이터베이스에 저장하기요약CSV, Excel, JSON 등 다양한 형식에서 데이터 불러오기CSV 파일 불러오기📚CSV 파일은 가장 많이 사용되는 데이터 형식 중 하나입니다. 판다스에서는 read_csv 함수를 사용해 쉽게 불러올 수 있어요.PythonCopyimport pandas as pd

# CSV 파일 불러오기
df_csv = pd.read_csv('data.csv')
print(df_csv.head())

​🔍 주요 옵션sep : 구분자를 지정합니다. 기본값은 ,입니다.header : 헤더 행을 지정합니다. 기본값은 첫 번째 행(0)입니다.예시: 만약 데이터가 탭으로 구분되어 있다면?PythonCopydf_csv = pd.read_csv('data.csv', sep='\')

​URL에서 CSV 파일 불러오기: 인터넷에 있는 CSV 파일을 바로 불러올 수 있습니다.PythonCopyurl = '<https://example.com/data.csv>'
df_csv_url = pd.read_csv(url)
print(df_csv_url.head())
​Excel 파일 불러오기📚Excel 파일도 판다스로 쉽게 불러올 수 있습니다. read_excel 함수를 사용하세요.PythonCopy# Excel 파일 불러오기
df_excel = pd.read_excel('data.xlsx')
print(df_excel.head())

​🔍 주요 옵션sheet_name : 읽고자 하는 시트 이름 또는 번호를 지정합니다. 기본값은 첫 번째 시트(0)입니다.header : 헤더 행을 지정합니다. 기본값은 첫 번째 행(0)입니다.예시: 특정 시트의 데이터를 불러오고 싶다면?PythonCopydf_excel = pd.read_excel('data.xlsx', sheet_name='Sheet2')

​URL에서 Excel 파일 불러오기: URL을 통해 Excel 파일도 불러올 수 있습니다.PythonCopyurl = '<https://example.com/data.xlsx>'
df_excel_url = pd.read_excel(url)
print(df_excel_url.head())

​JSON 파일 불러오기📚JSON 파일은 웹에서 자주 사용하는 데이터 형식입니다. 판다스에서는 read_json 함수를 사용해 불러올 수 있습니다.PythonCopy# JSON 파일 불러오기
df_json = pd.read_json('data.json')
print(df_json.head())

​🔍 주요 옵션orient : JSON 데이터의 형식을 지정합니다. 기본값은 columns입니다.URL에서 JSON 파일 불러오기: 웹에서 JSON 데이터를 직접 불러올 수도 있습니다.PythonCopyurl = '<https://example.com/data.json>'
df_json_url = pd.read_json(url)
print(df_json_url.head())

​📚요약판다스는 CSV, Excel, JSON 등 다양한 형식의 데이터를 쉽게 불러올 수 있는 기능을 제공합니다.URL을 통해 웹에서 직접 데이터를 불러오는 것도 가능하며, 이 기능을 통해 데이터 수집이 매우 간편해집니다.다양한 파일 형식의 데이터 로드를 익히면, 다양한 소스의 데이터를 활용하여 데이터 분석을 할 수 있습니다.이제 다양한 데이터 소스를 자유롭게 불러와서 분석을 시작해보세요! 😊CSV, Excel, JSON, SQL 등 다양한 형식으로 데이터 저장하기CSV 파일로 저장하기📚CSV 파일은 데이터를 저장할 때 가장 널리 사용되는 형식 중 하나입니다. 판다스에서는 to_csv 함수를 사용해 데이터를 쉽게 CSV 파일로 저장할 수 있습니다.PythonCopyimport pandas as pd

# 예시 데이터프레임 생성
df = pd.DataFrame({
'이름': ['철수', '영희', '민수'],
'나이': [25, 30, 35],
'직업': ['학생', '회사원', '프리랜서']
})
# CSV 파일로 저장하기
df.to_csv('data.csv', index=False)

​🔍 주요 옵션index=False : 인덱스를 제외하고 저장합니다.sep : 구분자를 지정합니다. 기본값은 ,입니다.URL로 저장하기: URL 경로가 아닌, 로컬 파일 시스템에 저장하는 방법이므로, URL을 지정할 수 없습니다.Excel 파일로 저장하기📚Excel 파일 형식으로 저장하려면 to_excel 함수를 사용합니다.PythonCopy# Excel 파일로 저장하기
df.to_excel('data.xlsx', index=False)

​🔍 주요 옵션sheet_name : 저장할 시트 이름을 지정합니다. 기본값은 Sheet1입니다.index=False : 인덱스를 제외하고 저장합니다.JSON 파일로 저장하기 📚JSON 파일 형식으로 데이터를 저장하려면 to_json 함수를 사용합니다.PythonCopy# JSON 파일로 저장하기
df.to_json('data.json')

​🔍 주요 옵션orient : JSON 형식을 지정합니다. 기본값은 columns입니다. records, index 등 다양한 형식으로 저장할 수 있습니다.PythonCopy# 예시: 레코드 형식으로 저장하기
df.to_json('data_records.json', orient='records')

​SQL 데이터베이스에 저장하기📚데이터를 SQL 데이터베이스에 저장하려면 to_sql 함수를 사용하고, 데이터베이스 연결이 필요합니다.PythonCopyimport sqlite3

# SQLite 데이터베이스 연결
conn = sqlite3.connect('database.db')
# 데이터프레임을 SQL 테이블로 저장하기
df.to_sql('table_name', conn, if_exists='replace', index=False)
# 연결 종료
conn.close()

​🔍 주요 옵션name : 저장할 테이블 이름을 지정합니다.