[스파르타코딩클럽] 7강. 데이터 전처리 실습 📘[SCC] 바닥부터 시작하는 머신러닝/📚[스파르타코딩클럽] 바닥부터 시작하는 머신러닝 - 2주차/📕[스파르타코딩클럽] 7강. 데이터 전처리 실습 Made with📕[스파르타코딩클럽] 7강. 데이터 전처리 실습 [수업 목표]데이터 전처리 개념 및 Pandas에서 사용하는 API를 알아봅시다데이터 전처리 방법을 알아 봅시다[목차]01. 데이터 전처리Data'A': [1, 2, np.nan, 4, 5, 100, 1, 2, 2, 4, '1', '2', '3', '4', '5', 10, 20, 30, 40, 50],
'B': [5, np.nan, np.nan, 8, 10, 60, 10, 20, 20, 40, '10', '20', '30', '40', '50', 5, 4, 3, 2, 1],
'C': [1, 2, 3, 4, 5, 5, 100, 200, 200, 400, 100, 200, 300, 400, 500, 1, 2, 3, 4, 5],
'D': [np.nan, np.nan, 3, 3, 3, 5, 5, 5, 5, 5, np.nan, np.nan, np.nan, np.nan, np.nan, 2, 3, 4, 5, 6],
'category_column': [np.nan]*10 + ['A', 'B', 'A', 'C', 'B'] + [np.nan]*5,
'value_column': [np.nan]*10 + [1, 2, 3, 4, 5] + [np.nan]*5,
'target': [np.nan]*15 + [1, 0, 1, 0, 1]
}
​1)결측값 처리☑️ 결측값 처리 방법제거: 결측값이 포함된 행 또는 열을 제거합니다.대체: 결측값을 특정 값으로 대체합니다.예측: 머신러닝 모델을 사용하여 결측값을 예측합니다.결측값 제거 {5px}결측값 제거 ﻿​PythonCopy# 결측값이 포함된 행 제거
df_dropped_rows = df.dropna()
# 결측값이 포함된 열 제거
df_dropped_cols = df.dropna(axis=1)
​dropna()를 사용하여 결측값 제거()를 사용하여 결측값 제거﻿​결측값 대체 {5px}결측값 대체 ﻿​PythonCopy# 결측값을 0으로 대체
df_filled = df.fillna(0)
# 결측값을 각 열의 평균값으로 대체
df_filled_mean = df.fillna(df.mean())
# 결측값을 각 열의 중간값으로 대체
df_filled_median = df.fillna(df.median())
# 결측값을 각 열의 최빈값으로 대체
df_filled_mode = df.fillna(df.mode().iloc[0])
​fillna()를 사용하여 결측값 대체()를 사용하여 결측값 대체﻿​결측값 예측 {5px}결측값 예측 ﻿​PythonCopyfrom sklearn.linear_model import LinearRegression

# 결측값이 있는 열과 없는 열 분리
df_with_na = df[df['column_with_na'].isnull()]
df_without_na = df[df['column_with_na'].notnull()]
# 회귀 모델 학습
model = LinearRegression()
model.fit(df_without_na[['feature1', 'feature2']], df_without_na['column_with_na'])
# 결측값 예측
predicted_values = model.predict(df_with_na[['feature1', 'feature2']])
# 예측된 값으로 결측값 대체
df.loc[df['column_with_na'].isnull(), 'column_with_na'] = predicted_values
​2) 이상값 처리☑️ 이상치란?데이터셋에서 비정상적으로 큰 값이나 작은 값이상치는 분석 결과에 큰 영향을 미칠 수 있으므로, 이를 적절히 처리하는 것이 중요이상치 확인 방법 {5px}이상치 확인 방법 ﻿​PythonCopy# 특정 열의 이상치 확인 (IQR 방법)
Q1 = df['column_name'].quantile(0.25)
Q3 = df['column_name'].quantile(0.75)
IQR = Q3 - Q1

# 이상치 범위 설정
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# 이상치 확인
outliers = df[(df['column_name'] < lower_bound) | (df['column_name'] > upper_bound)]
print(outliers)
​☑️ 이상치 처리 방법제거: 이상치를 데이터셋에서 제거합니다.대체: 이상치를 특정 값으로 대체합니다.변환: 이상치를 변환하여 데이터의 분포를 조정합니다.이상치 처리 방법 {5px}이상치 처리 방법 ﻿​PythonCopy# 이상치 제거
df_no_outliers = df[(df['column_name'] >= lower_bound) & (df['column_name'] <= upper_bound)]
# 이상치를 평균값으로 대체
mean_value = df['column_name'].mean()
df['column_name'] = df['column_name'].apply(lambda x: mean_value if x < lower_bound or x > upper_bound else x)
​3) 중복값 제거☑️ 중복 데이터 제거중복 데이터 제거 {5px}중복 데이터 제거 ﻿​PythonCopy# 중복된 행 확인
print(df.duplicated().sum())
# 중복된 행 제거
df_no_duplicates = df.drop_duplicates()
​4) 데이터 타입 변환☑️ 데이터 타입 변환의 필요성잘못된 데이터 타입은 분석 결과에 영향을 미칠 수 있으며, 모델 학습에 오류를 발생시킬 수있어 적절한 데이터 타입 변환이 필요합니다데이터 타입 변환 방법 {5px}데이터 타입 변환 방법 ﻿​PythonCopy# 특정 열의 데이터 타입을 정수형으로 변환
df['column_name'] = df['column_name'].astype(int)
# 특정 열의 데이터 타입을 문자열로 변환
df['column_name'] = df['column_name'].astype(str)
# 특정 열의 데이터 타입을 부동 소수점으로 변환
df['column_name'] = df['column_name'].astype(float)
​Pandas의 astype() 메서드를 사용하여 데이터 타입을 변환의 astype() 메서드를 사용하여 데이터 타입을 변환﻿​5) 인코딩☑️ 인코딩이란?범주형 데이터를 수치형 데이터로 변환하는 과정머신러닝 모델은 수치형 데이터를 입력으로 받기때문에, 범주형 데이터를 수치형으로 변환하는 것이 필요인코딩 방법 {5px}인코딩 방법 ﻿​PythonCopy# 범주형 데이터를 더미 변수로 변환
df_encoded = pd.get_dummies(df, columns=['category_column'])
# 결과 출력
print(df_encoded.head())
​Pandas의 get_dummies() 메서드를 사용하여 범주형 데이터를 더미 변수로 변환의 get_dummies() 메서드를 사용하여 범주형 데이터를 더미 변수로 변환﻿​6) 샘플링☑️ 샘플링이란?데이터셋의 크기를 줄이거나 늘리는 과정데이터셋의 대표성을 유지하면서 데이터의 크기를 조절하는 데 사용샘플링 방법 {5px}샘플링 방법 ﻿​PythonCopy# 데이터셋에서 50% 샘플 추출
df_sampled = df.sample(frac=0.5)
# 데이터셋에서 100개의 샘플 추출
df_sampled_n = df.sample(n=100)
​Pandas의 sample() 메서드를 사용하여 데이터셋에서 샘플을 추출의 sample() 메서드를 사용하여 데이터셋에서 샘플을 추출﻿​7) 특징 선택 및 추출☑️ 특징 선택 및 추출이란?특징 선택(Feature Selection) 및 추출(Feature Extraction)은 모델 성능을 높이기 위해 중요한 특징을 선택하거나 새로운 특징을 추출하는 과정특징 선택 방법 {5px}특징 선택 방법 ﻿​PythonCopyfrom sklearn.feature_selection import SelectKBest, f_classif

# 특징 선택 (상위 5개의 특징 선택)
selector = SelectKBest(score_func=f_classif, k=5)
X_new = selector.fit_transform(X, y)
# 선택된 특징의 인덱스
selected_features = selector.get_support(indices=True)
print(selected_features)
​Pandas와 Scikit-learn을 사용하여 특징 선택을 수행와 Scikit-learn을 사용하여 특징 선택을 수행﻿​특징 추출 방법 {5px}특징 추출 방법 ﻿​PythonCopy# 두 열의 곱을 새로운 특징으로 추가
df['new_feature'] = df['feature1'] * df['feature2']
# 두 열의 합을 새로운 특징으로 추가
df['new_feature_sum'] = df['feature1'] + df['feature2']
​Copyright ⓒ TeamSparta All rights reserved.