[스파르타코딩클럽] 15강. 비지도학습 : 군집화모델 - 계층적 군집화📘[SCC] 바닥부터 시작하는 머신러닝/📚[스파르타코딩클럽] 바닥부터 시작하는 머신러닝 - 4주차 /📕[스파르타코딩클럽] 15강. 비지도학습 : 군집화모델 - 계층적 군집화Made with📕[스파르타코딩클럽] 15강. 비지도학습 : 군집화모델 - 계층적 군집화[수업 목표]비지도학습 군집화모델 중 계층적 군집화 에 대한 개념을 배우고, 데이터를 이용해 실습해 봅니다[목차]01. 계층적 군집화 개념02. 계층적 군집화 실습병합 군집화: 각 데이터 포인트를 개별 군집으로 시작하여, 가장 가까운 군집을 반복적으로 병합합니다.병합 군집화: 각 데이터 포인트를 개별 군집으로 시작하여, 가장 가까운 군집을 반복적으로 병합합니다.﻿​분할 군집화: 모든 데이터 포인트를 하나의 군집으로 시작하여, 반복적으로 가장 멀리 떨어진 군집을 분할합니다.분할 군집화: 모든 데이터 포인트를 하나의 군집으로 시작하여, 반복적으로 가장 멀리 떨어진 군집을 분할합니다.﻿​☑️ 계층적 군집화의 작동 원리거리 행렬 계산: 데이터 포인트 간의 거리를 계산하여 거리 행렬을 만듭니다.군집 병합/분할: 거리 행렬을 기반으로 가장 가까운 군집을 병합하거나, 가장 멀리 떨어진 군집을 분할합니다.덴드로그램 생성: 군집화 과정을 시각화한 덴드로그램을 생성합니다.2) 병합 군집화 vs 분할 군집화☑️ 병합 군집화(Agglomerative Clustering)병합 군집화는 각 데이터 포인트를 개별 군집으로 시작하여, 가장 가까운 군집을 반복적으로 병합합니다.병합 군집화의 특징은 아래와 같습니다단순성: 구현이 비교적 간단합니다.계산 비용: 데이터 포인트 수가 많아질수록 계산 비용이 증가합니다.덴드로그램: 군집화 과정을 시각화한 덴드로그램을 생성할 수 있습니다.☑️ 분할 군집화(Divisive Clustering)분할 군집화는 모든 데이터 포인트를 하나의 군집으로 시작하여, 반복적으로 가장 멀리 떨어진 군집을 분할합니다. 분할 군집화의 주요 특징은 다음과 같습니다:상대적으로 복잡함: 병합 군집화보다 구현이 상대적으로 복잡할 수 있습니다.효율성: 큰 데이터셋에서 병합 군집화보다 효율적일 수 있습니다.덴드로그램: 군집화 과정을 시각화한 덴드로그램을 생성할 수 있습니다.02. 계층적 군집화 실습✔️Kaggle 쇼핑몰 데이터를 이용하여 계층적 군집화 실습을 진행합니다1) 쇼핑몰 데이터☑️ 데이터셋 다운로드Kaggle에서 "Mall_Customers.csv" 파일을 다운로드합니다.다운로드한 파일을 작업 디렉토리에 저장합니다.☑️ 데이터 로드 및 전처리쇼핑몰 데이터 로드 및 전처리 {5px}쇼핑몰 데이터 로드 및 전처리 ﻿​PythonCopyimport pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
import scipy.cluster.hierarchy as sch

# 데이터셋 불러오기
df = pd.read_csv('Mall_Customers.csv')
# 데이터 확인
print(df.head())
# 필요한 열만 선택
X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]
# 데이터 정규화
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
​pandas.read_csv: CSV 파일을 로드하여 데이터프레임 생성’Mall_Customers.csv’: 로드할 파일의 경로입니다.’Mall_Customers.csv’: 로드할 파일의 경로입니다.﻿​pandas.DataFrame.dropna: 결측값이 있는 행을 제거합니다.pandas.DataFrame.map: 데이터 값을 다른 값으로 매핑합니다.sklearn.preprocessing.StandardScaler: 데이터의 평균을 0, 분산을 1로 스케일링fit_transform(X_train): 훈련 세트를 스케일링하고 변환합니다._transform(X_train): 훈련 세트를 스케일링하고 변환합니다.﻿​☑️ 덴드로그램 생성덴드로그램 생성 {5px}덴드로그램 생성 ﻿​PythonCopy# 덴드로그램 생성
plt.figure(figsize=(10, 7))
dendrogram = sch.dendrogram(sch.linkage(X_scaled, method='ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distances')
plt.show()
​sklearn.cluster.KMeans: k-means 군집화 모델을 생성합니다n_clusters=k: 군집의 수를 설정합니다._clusters=k: 군집의 수를 설정합니다.﻿​random_state=42: 랜덤 시드 값으로, 결과의 재현성을 위해 사용됩니다._state=42: 랜덤 시드 값으로, 결과의 재현성을 위해 사용됩니다.﻿​fit(data_scaled): 데이터를 학습하여 군집을 형성합니다.(data_scaled): 데이터를 학습하여 군집을 형성합니다.﻿​labels_: 각 데이터 포인트가 속한 군집 레이블을 반환합니다._: 각 데이터 포인트가 속한 군집 레이블을 반환합니다.﻿​☑️ 계층적 군집화 모델 구현덴드로그램을 통해 최적의 군집 수를 결정한 후, 계층적 군집화 모델을 구현합니다.계층적 군집화 모델 구현 {5px}계층적 군집화 모델 구현 ﻿​PythonCopy# 계층적 군집화 모델 생성
hc = AgglomerativeClustering(n_clusters=5, metric='euclidean', linkage='ward')
# 모델 학습 및 예측
y_hc = hc.fit_predict(X_scaled)
# 결과 시각화
plt.figure(figsize=(10, 7))
plt.scatter(X_scaled[y_hc == 0, 0], X_scaled[y_hc == 0, 1], s=100, c='red', label='Cluster 1')
plt.scatter(X_scaled[y_hc == 1, 0], X_scaled[y_hc == 1, 1], s=100, c='blue', label='Cluster 2')
plt.scatter(X_scaled[y_hc == 2, 0], X_scaled[y_hc == 2, 1], s=100, c='green', label='Cluster 3')
plt.scatter(X_scaled[y_hc == 3, 0], X_scaled[y_hc == 3, 1], s=100, c='cyan', label='Cluster 4')
plt.scatter(X_scaled[y_hc == 4, 0], X_scaled[y_hc == 4, 1], s=100, c='magenta', label='Cluster 5')
plt.title('Clusters of customers')
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.legend()
plt.show()
​matplotlib.pyplot.plot: 그래프를 그립니다.K, inertia, ’bx-’: x축, y축 데이터와 그래프 스타일을 설정합니다., inertia, ’bx-’: x축, y축 데이터와 그래프 스타일을 설정합니다.﻿​seaborn.scatterplot: 산점도를 그립니다.x=data[’Age’]: x축 데이터=data[’Age’]: x축 데이터﻿​y=data[’Annual Income (k$)’]: y축 데이터=data[’Annual Income (k$)’]: y축 데이터﻿​hue=data[’Cluster’]: 색상에 따라 군집을 구분합니다.=data[’Cluster’]: 색상에 따라 군집을 구분합니다.﻿​palette=’viridis’: 색상 팔레트를 설정합니다.=’viridis’: 색상 팔레트를 설정합니다.﻿​☑️ 모델 평가모델 평가 {5px}모델 평가 ﻿​PythonCopyfrom sklearn.metrics import silhouette_score

# 실루엣 점수 계산
silhouette_avg = silhouette_score(X_scaled, y_hc)
print(f'Silhouette Score: {silhouette_avg}')
​Copyright ⓒ TeamSparta All rights reserved.