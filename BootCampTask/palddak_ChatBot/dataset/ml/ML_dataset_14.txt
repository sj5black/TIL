[스파르타코딩클럽] 14강. 비지도학습 : 군집화모델 - k-means clustering📘[SCC] 바닥부터 시작하는 머신러닝/📚[스파르타코딩클럽] 바닥부터 시작하는 머신러닝 - 4주차 /📕[스파르타코딩클럽] 14강. 비지도학습 : 군집화모델 - k-means clusteringMade with📕[스파르타코딩클럽] 14강. 비지도학습 : 군집화모델 - k-means clustering[수업 목표]비지도학습 군집화모델 중 k-means clustering 에 대한 개념을 배우고, 데이터를 이용해 실습해 봅니다[목차]01. k-means clustering 개념02. k-means clustering 실습import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# 데이터 로드
data = pd.read_csv('Mall_Customers.csv')
# 필요한 열 선택 및 결측값 처리
data = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]
# 데이터 스케일링
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)
​pandas.read_csv: CSV 파일을 로드하여 데이터프레임 생성’Mall_Customers.csv’: 로드할 파일의 경로입니다.’Mall_Customers.csv’: 로드할 파일의 경로입니다.﻿​pandas.DataFrame.dropna: 결측값이 있는 행을 제거합니다.pandas.DataFrame.map: 데이터 값을 다른 값으로 매핑합니다.sklearn.preprocessing.StandardScaler: 데이터의 평균을 0, 분산을 1로 스케일링fit_transform(X_train): 훈련 세트를 스케일링하고 변환합니다._transform(X_train): 훈련 세트를 스케일링하고 변환합니다.﻿​☑️ 모델 학습 및 군집화모델 학습 및 군집화 {5px}모델 학습 및 군집화 ﻿​PythonCopy# 최적의 k 찾기 (엘보우 방법)
inertia = []
K = range(1, 11)
for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_scaled)
    inertia.append(kmeans.inertia_)
# 엘보우 그래프 그리기
plt.figure(figsize=(10, 8))
plt.plot(K, inertia, 'bx-')
plt.xlabel('k')
plt.ylabel('Inertia')
plt.title('Elbow Method For Optimal k')
plt.show()
# k=5로 모델 생성 및 학습
kmeans = KMeans(n_clusters=5, random_state=42)
kmeans.fit(data_scaled)
# 군집 결과 할당
data['Cluster'] = kmeans.labels_
​sklearn.cluster.KMeans: k-means 군집화 모델을 생성합니다n_clusters=k: 군집의 수를 설정합니다._clusters=k: 군집의 수를 설정합니다.﻿​random_state=42: 랜덤 시드 값으로, 결과의 재현성을 위해 사용됩니다._state=42: 랜덤 시드 값으로, 결과의 재현성을 위해 사용됩니다.﻿​fit(data_scaled): 데이터를 학습하여 군집을 형성합니다.(data_scaled): 데이터를 학습하여 군집을 형성합니다.﻿​labels_: 각 데이터 포인트가 속한 군집 레이블을 반환합니다._: 각 데이터 포인트가 속한 군집 레이블을 반환합니다.﻿​☑️ 군집 시각화군집 시각화 {5px}군집 시각화 ﻿​PythonCopy# 2차원으로 군집 시각화 (연령 vs 소득)
plt.figure(figsize=(10, 8))
sns.scatterplot(x=data['Age'], y=data['Annual Income (k$)'], hue=data['Cluster'], palette='viridis')
plt.title('Clusters of customers (Age vs Annual Income)')
plt.show()
# 2차원으로 군집 시각화 (소득 vs 지출 점수)
plt.figure(figsize=(10, 8))
sns.scatterplot(x=data['Annual Income (k$)'], y=data['Spending Score (1-100)'], hue=data['Cluster'], palette='viridis')
plt.title('Clusters of customers (Annual Income vs Spending Score)')
plt.show()
​matplotlib.pyplot.plot: 그래프를 그립니다.K, inertia, ’bx-’: x축, y축 데이터와 그래프 스타일을 설정합니다., inertia, ’bx-’: x축, y축 데이터와 그래프 스타일을 설정합니다.﻿​seaborn.scatterplot: 산점도를 그립니다.x=data[’Age’]: x축 데이터=data[’Age’]: x축 데이터﻿​y=data[’Annual Income (k$)’]: y축 데이터=data[’Annual Income (k$)’]: y축 데이터﻿​hue=data[’Cluster’]: 색상에 따라 군집을 구분합니다.=data[’Cluster’]: 색상에 따라 군집을 구분합니다.﻿​palette=’viridis’: 색상 팔레트를 설정합니다.=’viridis’: 색상 팔레트를 설정합니다.﻿​Copyright ⓒ TeamSparta All rights reserved.