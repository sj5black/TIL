조건부 필터링과 데이터 타입 변환📕인공지능을 위한 파이썬 라이브러리/📘인공지능을 위한 파이썬 라이브러리 - 3주차/4️⃣조건부 필터링과 데이터 타입 변환Made with4️⃣조건부 필터링과 데이터 타입 변환수업 목표판다스에서 필터링과 데이터 타입을 변환하는 방법에 대해서 학습합니다.목차조건부 필터링데이터 타입 변환요약조건부 필터링📚조건부 필터링을 통해 데이터프레임에서 특정 조건을 만족하는 데이터만 선택할 수 있습니다. 이 기능은 데이터 분석에서 매우 유용합니다.기본 조건부 필터링조건을 사용해 필터링된 데이터프레임을 반환할 수 있습니다.PythonCopyimport pandas as pd

# 예시 데이터프레임 생성
data = {
'이름': ['철수', '영희', '민수', '지수'],
'나이': [25, 30, 22, 35],
'직업': ['학생', '회사원', '학생', '프리랜서']
}
df = pd.DataFrame(data)
# 나이가 25 이상인 행만 선택
filtered_df = df[df['나이'] >= 25]
print(filtered_df)

​결과:Plain TextCopy   이름  나이       직업
0  철수   25      학생
1  영희   30    회사원
3  지수   35  프리랜서

​여러 조건을 사용한 필터링여러 조건을 결합하여 필터링할 수 있습니다. AND(&), OR(|) 연산자를 사용하세요.PythonCopy# 나이가 25 이상이고, 직업이 '학생'인 행만 선택
filtered_df = df[(df['나이'] >= 25) & (df['직업'] == '학생')]
print(filtered_df)

​결과:Plain TextCopy   이름  나이  직업
0  철수   25  학생

​isin()을 사용한 필터링특정 값들이 포함된 행을 필터링할 때 유용합니다.PythonCopy# 직업이 '학생' 또는 '프리랜서'인 행 선택
filtered_df = df[df['직업'].isin(['학생', '프리랜서'])]
print(filtered_df)

​결과:Plain TextCopy   이름  나이       직업
0  철수   25      학생
2  민수   22      학생
3  지수   35  프리랜서

​~ 연산자를 사용한 반대 조건 필터링특정 조건을 부정하는 데이터를 선택할 때 사용합니다.PythonCopy# 직업이 '학생'이 아닌 행 선택
filtered_df = df[~(df['직업'] == '학생')]
print(filtered_df)

​결과:Plain TextCopy   이름  나이       직업
1  영희   30    회사원
3  지수   35  프리랜서

​데이터 타입 변환📚데이터프레임의 데이터 타입을 확인하고, 필요에 따라 변환하는 방법입니다. 데이터 분석 및 처리 시, 올바른 데이터 타입을 사용하는 것이 중요합니다.dtype으로 데이터 타입 확인각 열의 데이터 타입을 확인할 수 있습니다.PythonCopyprint(df.dtypes)

​결과:Plain TextCopy이름    object
나이     int64
직업    object
dtype: object

​astype()을 사용한 데이터 타입 변환astype() 함수로 특정 열의 데이터 타입을 변경할 수 있습니다.PythonCopy# '나이' 열을 정수형(int)에서 실수형(float)으로 변환
df['나이'] = df['나이'].astype(float)
print(df.dtypes)

​결과:Plain TextCopy이름    object
나이    float64
직업    object
dtype: object

​날짜 타입으로 변환날짜 데이터는 pd.to_datetime() 함수를 사용해 날짜 타입으로 변환할 수 있습니다.PythonCopy# 예시 데이터프레임 생성
data = {
'이름': ['철수', '영희', '민수'],
'가입일': ['2023-01-01', '2022-12-15', '2023-05-22']
}
df = pd.DataFrame(data)
# '가입일'을 날짜 타입으로 변환
df['가입일'] = pd.to_datetime(df['가입일'])
print(df.dtypes)

​결과:Plain TextCopy이름            object
가입일    datetime64[ns]
dtype: object

​카테고리 데이터로 변환카테고리는 메모리를 절약하고, 성능을 높이기 위해 사용할 수 있습니다.PythonCopy# '직업' 열을 카테고리형으로 변환
df['직업'] = df['직업'].astype('category')
print(df.dtypes)

​결과:Plain TextCopy이름     object
나이    float64
직업   category
dtype: object

​요약📚요약조건부 필터링은 특정 조건을 만족하는 데이터만 선택하는 강력한 도구입니다. &, |, ~ 등의 연산자를 결합하여 복잡한 조건을 구성할 수 있습니다.데이터 타입 변환은 데이터를 올바르게 처리하기 위해 필수적이며, astype(), pd.to_datetime() 등을 사용해 변환할 수 있습니다.데이터의 정확한 타입을 지정함으로써 메모리 절약과 성능 향상을 기대할 수 있습니다.이제 다양한 조건으로 데이터를 필터링하고, 적절한 데이터 타입으로 변환하여 데이터 분석의 효율을 높여보세요! 😊