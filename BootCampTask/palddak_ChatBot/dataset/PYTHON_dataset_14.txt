데이터 전처리: 인코딩 (Encoding)📕인공지능을 위한 파이썬 라이브러리/📘인공지능을 위한 파이썬 라이브러리 - 5주차/4️⃣데이터 전처리: 인코딩 (Encoding)4️⃣데이터 전처리: 인코딩 (Encoding)수업 목표범주형 데이터를 수치형 데이터로 변환하는 과정에 대해서 학습합니다.목차인코딩(Encoding)이란?레이블 인코딩(Label Encoding) 원-핫 인코딩(One-Hot Encoding)차원 축소 인코딩 (Count or Frequency Encoding)순서형 인코딩 (Ordinal Encoding)임베딩(Embedding)요약인코딩(Encoding)이란?📚인코딩(Encoding)은 범주형 데이터(Categorical Data)를 수치형 데이터로 변환하는 과정입니다. 많은 머신러닝 모델은 수치형 데이터만 처리할 수 있기 때문에, 범주형 데이터를 인코딩하는 것이 필수적입니다.레이블 인코딩(Label Encoding) 📚레이블 인코딩은 범주형 데이터를 순서가 있는 숫자로 변환합니다. 각 범주에 고유한 숫자가 할당됩니다.PythonCopyimport pandas as pd
from sklearn.preprocessing import LabelEncoder

# 예시 데이터프레임 생성
data = {'과일': ['사과', '바나나', '사과', '오렌지', '바나나']}
df = pd.DataFrame(data)
# 레이블 인코딩
label_encoder = LabelEncoder()
df['과일_인코딩'] = label_encoder.fit_transform(df['과일'])
print(df)

​결과:Plain TextCopy      과일  과일_인코딩
0     사과       0
1    바나나       1
2     사과       0
3    오렌지       2
4    바나나       1

​사과는 0, 바나나는 1, 오렌지는 2로 인코딩되었습니다.❗레이블 인코딩의 주의점레이블 인코딩은 범주형 데이터에 순서가 있을 때 적합합니다. 순서가 없는 데이터에 사용하면, 모델이 이 값을 크기로 인식해 잘못된 결과를 초래할 수 있습니다.원-핫 인코딩(One-Hot Encoding)📚원-핫 인코딩은 각 범주를 이진 벡터로 변환합니다. 각 범주는 고유한 열을 가지며, 해당하는 열에는 1, 나머지 열에는 0이 할당됩니다.PythonCopy# 원-핫 인코딩
df_one_hot = pd.get_dummies(df['과일'], prefix='과일')
print(df_one_hot)

​결과:Plain TextCopy   과일_바나나  과일_사과  과일_오렌지
0        0        1        0
1        1        0        0
2        0        1        0
3        0        0        1
4        1        0        0

​바나나, 사과, 오렌지 각각이 독립된 열로 변환되었고, 해당하는 위치에 1이 표시됩니다.❗원-핫 인코딩의 장점범주형 데이터에 순서가 없을 때 사용하기 좋습니다. 모델이 범주 간의 순서나 관계를 인식하지 않고 각 범주를 독립적으로 처리할 수 있습니다.차원 축소 인코딩 (Count or Frequency Encoding)📚차원 축소 인코딩은 범주형 데이터가 많을 때 유용합니다. 각 범주를 데이터셋 내에서의 출현 빈도로 인코딩합니다.PythonCopy# 빈도 기반 인코딩
df['과일_빈도'] = df['과일'].map(df['과일'].value_counts())
print(df)

​결과:Plain TextCopy      과일  과일_인코딩  과일_빈도
0     사과       0       2
1    바나나       1       2
2     사과       0       2
3    오렌지       2       1
4    바나나       1       2

​사과와 바나나는 각각 2회, 오렌지는 1회 출현하여 해당 빈도로 인코딩되었습니다.❗주의점이 방법은 범주형 데이터의 빈도가 매우 중요한 경우에 적합하며, 범주의 고유성을 잃을 수 있으므로 주의해서 사용해야 합니다.순서형 인코딩 (Ordinal Encoding)📚순서형 인코딩은 순서가 있는 범주형 데이터를 그 순서에 따라 숫자로 변환하는 방식입니다.PythonCopy# 예시 데이터
data = {'등급': ['낮음', '중간', '높음', '중간', '높음']}
df = pd.DataFrame(data)
# 순서형 인코딩
order = {'낮음': 1, '중간': 2, '높음': 3}
df['등급_인코딩'] = df['등급'].map(order)
print(df)

​결과:Plain TextCopy    등급  등급_인코딩
0  낮음       1
1  중간       2
2  높음       3
3  중간       2
4  높음       3

​낮음은 1, 중간은 2, 높음은 3으로 인코딩되었습니다.❗사용 예시순서형 인코딩은 만족도(낮음, 중간, 높음), 등급(A, B, C) 등 순서가 중요한 경우에 적합합니다.임베딩(Embedding)📚임베딩은 딥러닝에서 주로 사용되며, 범주형 데이터를 벡터 공간에 매핑하여 변환합니다. 이는 특히 고차원 범주형 데이터에 유용합니다.❗임베딩의 장점원-핫 인코딩보다 차원 축소와 메모리 절약 효과가 있으며, 범주 간의 내재된 관계를 학습할 수 있습니다.임베딩은 주로 텍스트 데이터에서 단어를 벡터로 변환할 때 사용되며, Keras 등의 라이브러리에서 쉽게 구현할 수 있습니다.요약📚요약인코딩은 범주형 데이터를 수치형 데이터로 변환하는 과정으로, 머신러닝 모델에서 데이터를 처리하기 위해 필수적입니다.레이블 인코딩은 순서가 있는 범주형 데이터에 적합하며, 원-핫 인코딩은 순서가 없는 범주형 데이터에 사용됩니다.빈도 인코딩은 범주의 출현 빈도를 사용하고, 순서형 인코딩은 순서가 중요한 범주형 데이터에 유용합니다.임베딩은 딥러닝에서 고차원 범주형 데이터를 처리할 때 주로 사용됩니다.이제 적절한 인코딩 기법을 사용하여 데이터 전처리를 완료하고, 모델 학습의 기초를 다져보세요! 😊