데이터 전처리: 결측치 탐지와 다양한 처리 방법📕인공지능을 위한 파이썬 라이브러리/📘인공지능을 위한 파이썬 라이브러리 - 5주차/1️⃣데이터 전처리: 결측치 탐지와 다양한 처리 방법1️⃣데이터 전처리: 결측치 탐지와 다양한 처리 방법수업 목표불러온 데이터에서 결측치를 찾고 대체하는 방법에 대해서 학습합니다.목차결측치 탐지결측치 처리 방법고급 결측치 처리 방법요약결측치 탐지📚데이터 분석에서 결측치(Missing Values)는 흔히 발생하며, 이를 올바르게 처리하는 것이 중요합니다. 판다스는 결측치를 쉽게 탐지하고 처리할 수 있는 다양한 기능을 제공합니다.isna()와 isnull()로 결측치 탐지isna()와 isnull() 함수는 데이터프레임의 각 요소가 결측치인지 여부를 확인합니다. 두 함수는 동일한 기능을 합니다.PythonCopyimport pandas as pd

# 예시 데이터프레임 생성
data = {
'이름': ['철수', '영희', '민수', '지수'],
'나이': [25, 30, None, 35],
'직업': ['학생', '회사원', '학생', None]
}
df = pd.DataFrame(data)
# 결측치 여부 확인
print(df.isna())

​결과:Plain TextCopy     이름     나이    직업
0  False  False  False
1  False  False  False
2  False   True  False
3  False  False   True

​sum()을 사용한 결측치 개수 확인결측치의 총 개수를 확인하려면 isna() 또는 isnull()과 sum()을 조합해 사용합니다.PythonCopy# 각 열별 결측치 개수 확인
print(df.isna().sum())

​결과:Plain TextCopy이름    0
나이    1
직업    1
dtype: int64

​결측치 처리 방법📚결측치를 적절하게 처리하는 방법은 데이터의 특성과 분석 목적에 따라 달라집니다. 여기서는 대표적인 처리 방법들을 소개합니다.결측치 제거결측치가 포함된 행이나 열을 삭제할 수 있습니다. dropna() 함수를 사용합니다.PythonCopy# 결측치가 있는 행 제거
df_dropped_rows = df.dropna()
print(df_dropped_rows)

​결과:Plain TextCopy   이름   나이    직업
0  철수  25.0   학생
1  영희  30.0  회사원

​결측치가 있는 열을 제거하려면 axis=1을 지정합니다.PythonCopy# 결측치가 있는 열 제거
df_dropped_columns = df.dropna(axis=1)
print(df_dropped_columns)

​결과:Plain TextCopy   이름
0  철수
1  영희
2  민수
3  지수

​결측치 대체(채우기)결측치를 특정 값으로 대체(채우기)할 수 있습니다. fillna() 함수를 사용합니다.PythonCopy# 결측치를 '없음'으로 대체
df_filled = df.fillna('없음')
print(df_filled)

​결과:Plain TextCopy   이름    나이    직업
0  철수   25.0    학생
1  영희   30.0  회사원
2  민수  없음    학생
3  지수   35.0   없음

​평균, 중앙값, 최빈값 등으로 결측치를 채울 수 있습니다.PythonCopy# '나이' 열의 결측치를 평균값으로 대체
df['나이'] = df['나이'].fillna(df['나이'].mean())
print(df)

​결과:Plain TextCopy   이름    나이    직업
0  철수  25.0    학생
1  영희  30.0  회사원
2  민수  30.0    학생
3  지수  35.0   없음

​결측치 보간(Interpolation)결측치를 주변 값들을 기반으로 보간할 수 있습니다. interpolate() 함수를 사용합니다. 특히 시간 데이터를 다룰 때 유용합니다.PythonCopy# 예시 데이터프레임 생성
data = {
'날짜': pd.date_range('2023-01-01', periods=5),
'온도': [20, 22, None, 24, 25]
}
df2 = pd.DataFrame(data)
# 선형 보간법으로 결측치 채우기
df2['온도'] = df2['온도'].interpolate()
print(df2)

​결과:Plain TextCopy         날짜    온도
0 2023-01-01  20.0
1 2023-01-02  22.0
2 2023-01-03  23.0
3 2023-01-04  24.0
4 2023-01-05  25.0

​고급 결측치 처리 방법특정 조건을 기반으로 결측치 처리특정 조건을 기반으로 결측치를 처리할 수도 있습니다. 예를 들어, 다른 열의 값을 기준으로 결측치를 채우는 방법입니다.PythonCopy# '직업'이 '학생'인 경우 '나이'를 20으로 채우기
df.loc[(df['직업'] == '학생') & (df['나이'].isna()), '나이'] = 20
print(df)

​결과:Plain TextCopy   이름    나이    직업
0  철수  25.0    학생
1  영희  30.0  회사원
2  민수  20.0    학생
3  지수  35.0   없음

​apply()를 사용한 사용자 정의 함수 적용apply() 함수를 사용해 결측치를 처리하는 사용자 정의 함수를 적용할 수 있습니다.PythonCopy# 예시: '나이'가 결측치일 경우, 기본값으로 18을 채우는 함수
def fill_missing_age(x):
if pd.isna(x):
return 18
return x

df['나이'] = df['나이'].apply(fill_missing_age)
print(df)

​결과:Plain TextCopy   이름    나이    직업
0  철수  25.0    학생
1  영희  30.0  회사원
2  민수  20.0    학생
3  지수  35.0   없음

​요약📚요약결측치 탐지는 isna()와 isnull()을 사용해 수행하며, sum()을 통해 열별 결측치 개수를 확인할 수 있습니다.결측치 처리 방법으로는 행 또는 열 삭제(dropna()), 특정 값으로 채우기(fillna()), 보간법(interpolate()), 조건 기반 처리 및 사용자 정의 함수 적용 등이 있습니다.데이터의 특성과 분석 목적에 따라 적절한 결측치 처리 방법을 선택하는 것이 중요합니다.이제 결측치를 효과적으로 처리하여 더 정확한 분석 결과를 얻어보세요! 😊