# 전국 무더위 쉼터 표준 데이터(2019)- 전국 무더위 쉼터 표준 데이터(2019) : 공공데이터 포털(https://www.data.go.kr/data/15013199/standard.do)## 1. 필요한 라이브러리 importimport pandas as pdimport numpy as npimport missingno as msnoimport matplotlib.pyplot as pltimport matplotlib.cm as cmfrom matplotlib.cm import scalarmappablefrom sklearn import preprocessingimport seaborn as snsimport mathimport json- 한글 지원 코드import platformfrom matplotlib import font_manager, rcif platform.system()=='windows':    path = 'c:/windows/fonts/malgun.ttf'    font_name = font_manager.fontproperties(fname=path).get_name()    rc('font', family=font_name)## 2. 데이터 파일 .csv 읽어보기shelter = pd.read_csv('./sampledata/전국무더위쉼터표준데이터.csv', encoding='euc-kr')## 3. 원본 데이터 복사해서 활용shelter_data = shelter.copy()## 4. 데이터 정보 확인### 4.1 차원shelter_data.shape### 4.2 정보shelter_data.info()### 3.3 타입shelter_data.dtypes## 4. 5개의 데이터 확인### 4.1 상위 5개shelter.head()### 4.2 하위 5개shelter.tail()### 4.3 샘플 데이터 5개shelter_data.sample(5)## 5. null 값이 있는 데이터 찾기shelter_data.isnull()shelter_data.isnull().sum()msno.matrix(shelter_data, figsize=(10, 8))## 6. dataframe 수정df_shelter = shelter_data.copy()- 분석과 상관없는 column 제거df_shelter = df_shelter.drop(["법정동명", "시설면적", "특이사항", "소재지지번주소", "관리기관명", "관리기관전화번호", "위도", "경도", "데이터기준일자", "제공기관코드", "제공기관명"], axis=1)df_shelter.head()df_shelter.shapeshelter_type_arr = df_shelter["쉼터유형구분"].unique()is_open_nights = df_shelter["야간연장운영여부"].unique()is_open_weekends = df_shelter["주말운영여부"].unique()is_open_weekendsis_accomodation_available = df_shelter["숙박가능여부"].unique()is_accomodation_available- 주말운영여부 y → y로 수정df_shelter.loc[df_shelter["주말운영여부"]=='y', "주말운영여부"] = "y"- 무더위쉼터 소재지 주소에서 광역시/도 부분 추출하여 새로 column 생성df_shelter["광역시/도"] = df_shelter["소재지도로명주소"].str.split(" ").str[0]region_arr = []region_arr = df_shelter["광역시/도"].unique()region_arr = region_arr[~pd.isnull(region_arr)]region_arr- column 순서 재조정df_shelter = df_shelter[["쉼터명", "광역시/도", "쉼터유형구분", "운영시작일자", "운영종료일자", "이용가능인원수", "선풍기보유대수", "에어컨보유대수", "야간연장운영여부", "주말운영여부", "숙박가능여부", "소재지도로명주소"]]df_shelter.sample(5)- 각 광역시/도별 평균 값pd.pivot_table(df_shelter, index=["광역시/도"], fill_value=0, margins=true)- 각 광역시/도별 합계region_sum = pd.pivot_table(df_shelter, index=["광역시/도"], aggfunc='sum', fill_value=0)region_sumdf_shelter.describe()df_shelter.describe(include=[np.object]).style.set_properties(subset=["소재지도로명주소"], **{'width': '230px'})- 숙박 가능 비율 - 원/스택- 연도별 운영 시작 쉼터 수- 도별 이용가능인원- 이용가능 인원 대비 선풍기/에어컨 개수 - 스캐터 + 직선- 쉼터유형 비율 - heatmapdf_province = df_shelter[["쉼터명", "광역시/도", "쉼터유형구분"]]df_province.shapedf_province.sample(10)## 7. 분석### 7.1 각 광역시/도 소재 무더위쉼터 개수 - 막대그래프 + 지도shelter_counts = {}for region in region_arr:    shelter_counts[region] = len(df_shelter[df_shelter["광역시/도"]==region])    shelter_countsdf_region = pd.dataframe(shelter_counts.items(), columns=["광역시/도", "무더위쉼터 수"])df_region.dropna(subset = ["광역시/도"], inplace=true)df_region.set_index("광역시/도", inplace=true)df_region["무더위쉼터 수"]["서울특별시"]my_cmap = plt.cm.get_cmap('cool_r')colors = cm.cool_r(np.linspace(0, 1, len(df_region)))df_region["무더위쉼터 수"].sort_values().plot(kind='barh', grid=true, figsize=(10, 8), color=colors)x = df_region["무더위쉼터 수"]y = df_region.indexdata_color = [ y / max(x) for y in x]sm = scalarmappable(cmap=my_cmap, norm=plt.normalize(0, max(data_color)))sm.set_array([])cbar = plt.colorbar(sm)cbar.set_label('color', rotation=270, labelpad = 25)for i, v in enumerate(df_region["무더위쉼터 수"].sort_values()):    plt.text(v + 3 , i, str(v), color='y', fontweight='bold', fontsize=12)    plt.xlim(0, 7000)plt.xlabel("무더위쉼터 수")plt.ylabel("광역시/도")plt.title("전국 무더위쉼터 현황")### 7.2 각 광역시/도 소재 무더위쉼터 기관 비율 - heatmapshelter_financial_counts = df_shelter[df_shelter["쉼터유형구분"]=="금융기관"]["광역시/도"].value_counts()shelter_ef_counts = df_shelter[df_shelter["쉼터유형구분"]=="노인시설"]["광역시/도"].value_counts()shelter_cc_counts = df_shelter[df_shelter["쉼터유형구분"]=="주민센터"]["광역시/도"].value_counts()shelter_etc_counts = df_shelter[df_shelter["쉼터유형구분"]=="기타"]["광역시/도"].value_counts()shelter_rf_counts = df_shelter[df_shelter["쉼터유형구분"]=="종교시설"]["광역시/도"].value_counts()shelter_wf_counts = df_shelter[df_shelter["쉼터유형구분"]=="복지회관"]["광역시/도"].value_counts()shelter_ph_counts = df_shelter[df_shelter["쉼터유형구분"]=="보건소"]["광역시/도"].value_counts()shelter_to1_counts = df_shelter[df_shelter["쉼터유형구분"]=="읍면동사무소"]["광역시/도"].value_counts()shelter_th_counts = df_shelter[df_shelter["쉼터유형구분"]=="마을회관"]["광역시/도"].value_counts()shelter_sh_counts = df_shelter[df_shelter["쉼터유형구분"]=="정자"]["광역시/도"].value_counts()shelter_to2_counts = df_shelter[df_shelter["쉼터유형구분"]=="면동사무소"]["광역시/도"].value_counts()shelter_rc_type = {} # 지역별 무더위쉼터 기관유형 수for region in region_arr:    shelter_rc_type[region] = df_shelter[df_shelter["광역시/도"]==region]["쉼터유형구분"].value_counts()shelter_tc_region = {} # 기관유형별 지역 개설 수for shelter_type in shelter_type_arr:    shelter_tc_region[shelter_type] = df_shelter[df_shelter["쉼터유형구분"]==shelter_type]["광역시/도"].value_counts()df_type = pd.dataframe(data=[shelter_rc_type["서울특별시"], shelter_rc_type["경상북도"], shelter_rc_type["전라남도"], shelter_rc_type["경기도"], shelter_rc_type["대전광역시"], shelter_rc_type["대구광역시"], shelter_rc_type["충청북도"], shelter_rc_type["충청남도"], shelter_rc_type["전라북도"], shelter_rc_type["인천광역시"], shelter_rc_type["광주광역시"], shelter_rc_type["제주특별자치도"], shelter_rc_type["강원도"], shelter_rc_type["부산광역시"], shelter_rc_type["경상남도"], shelter_rc_type["울산광역시"], shelter_rc_type["세종특별자치시"]], index=region_arr, columns=df_shelter["쉼터유형구분"].unique())df_type = df_type[["금융기관", "노인시설", "보건소", "복지회관", "읍면동사무소", "면동사무소", "주민센터", "마을회관", "종교시설", "정자", "기타"]]df_type = df_type.fillna(0)df_type["총합"] = df_region["무더위쉼터 수"]type_sum = pd.pivot_table(df_type, index=region_arr, aggfunc='sum', fill_value=0, margins=true)type_sumplt.figure(figsize=(20, 10))sns.heatmap(df_type, annot=true, fmt=".1f", cmap="coolwarm_r", annot_kws={'size':13})plt.title("지역별 무더위쉼터 기관 비율", fontsize=20)plt.show()- 데이터 값의 차이가 크므로 비슷한 범위에 놓고 비교할 수 있도록 column별로 정규화col = df_type.columnsx = df_type[col].valuesmin_max_scaler = preprocessing.minmaxscaler()x_scaled = min_max_scaler.fit_transform(x.astype(float))df_type_norm = pd.dataframe(x_scaled, columns=col, index=df_type.index)df_type_normplt.figure(figsize=(20, 10))sns.heatmap(df_type_norm, annot=true, fmt=".4f", cmap="coolwarm_r", annot_kws={'size':13})plt.title("지역별 무더위쉼터 기관 비율", fontsize=20)plt.show()### 7.3 무더위 쉼터 주말 운영, 야간 연장 운영, 숙박 가능 비율close_night = len(df_shelter.loc[df_shelter["야간연장운영여부"]==is_open_nights[0]])open_night = len(df_shelter.loc[df_shelter["야간연장운영여부"]==is_open_nights[1]])no_info_night = len(df_shelter.loc[df_shelter["야간연장운영여부"].isna()])open_night_info = np.array([close_night, open_night, no_info_night])close_night_close_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"]==is_open_nights[0]) & (df_shelter["주말운영여부"]==is_open_weekends[0])])close_night_open_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"]==is_open_nights[0]) & (df_shelter["주말운영여부"]==is_open_weekends[1])])close_night_no_info_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"]==is_open_nights[0]) & (df_shelter["주말운영여부"].isna())])open_night_close_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"]==is_open_nights[1]) & (df_shelter["주말운영여부"]==is_open_weekends[0])])open_night_open_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"]==is_open_nights[1]) & (df_shelter["주말운영여부"]==is_open_weekends[1])])open_night_no_info_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"]==is_open_nights[1]) & (df_shelter["주말운영여부"].isna())])no_info_night_close_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"].isna()) & (df_shelter["주말운영여부"]==is_open_weekends[0])])no_info_night_open_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"].isna()) & (df_shelter["주말운영여부"]==is_open_weekends[1])])no_info_night_no_info_weekend = len(df_shelter.loc[(df_shelter["야간연장운영여부"].isna()) & (df_shelter["주말운영여부"].isna())])open_weekend_info = np.array([close_night_close_weekend, close_night_open_weekend, close_night_no_info_weekend, open_night_close_weekend, open_night_open_weekend, open_night_no_info_weekend, no_info_night_close_weekend, no_info_night_open_weekend, no_info_night_no_info_weekend])print(open_night_info)print(open_weekend_info)close_weekend_accomodation_unavailable = len(df_shelter.loc[(df_shelter["주말운영여부"]==is_open_weekends[0]) & (df_shelter["숙박가능여부"]==is_accomodation_available[0])])close_weekend_no_info_accomodation = len(df_shelter.loc[(df_shelter["주말운영여부"]==is_open_weekends[0]) & (df_shelter["숙박가능여부"].isna())])close_weekend_accomodation_available = len(df_shelter.loc[(df_shelter["주말운영여부"]==is_open_weekends[0]) & (df_shelter["숙박가능여부"]==is_accomodation_available[2])])open_weekend_accomodation_unavailable = len(df_shelter.loc[(df_shelter["주말운영여부"]==is_open_weekends[1]) & (df_shelter["숙박가능여부"]==is_accomodation_available[0])])open_weekend_no_info_accomodation = len(df_shelter.loc[(df_shelter["주말운영여부"]==is_open_weekends[1]) & (df_shelter["숙박가능여부"].isna())])open_weekend_accomodation_available = len(df_shelter.loc[(df_shelter["주말운영여부"]==is_open_weekends[1]) & (df_shelter["숙박가능여부"]==is_accomodation_available[2])])no_info_weekend_accomodation_unavailable = len(df_shelter.loc[(df_shelter["주말운영여부"].isna()) & (df_shelter["숙박가능여부"]==is_accomodation_available[0])])no_info_weekend_no_info_accomodation = len(df_shelter.loc[(df_shelter["주말운영여부"].isna()) & (df_shelter["숙박가능여부"].isna())])no_info_weekend_accomodation_available = len(df_shelter.loc[(df_shelter["주말운영여부"].isna()) & (df_shelter["숙박가능여부"]==is_accomodation_available[2])])accomodation_info = np.array([close_weekend_accomodation_unavailable, close_weekend_no_info_accomodation, close_weekend_accomodation_available, open_weekend_accomodation_unavailable, open_weekend_no_info_accomodation, open_weekend_accomodation_available, no_info_weekend_accomodation_unavailable, no_info_weekend_no_info_accomodation, no_info_weekend_accomodation_available])accomodation_infolabels_weekend = ['휴무', '운영', '정보없음', '휴무', '운영', '정보없음', '휴무', '운영', '정보없음']labels_night = ['미연장', '연장', '정보없음']colors_weekend = ['#ffaaa5', '#d6e6f2', '#ffd3b6', '#ffaaa5', '#d6e6f2', '#ffd3b6', '#ffaaa5', '#d6e6f2', '#ffd3b6']colors_night = ['#ffe2e2','#e0f9b5', '#fefdca']explode_weekend = (0, 0, 0.3, 0.1, 0, 0, 0.6, 0.4, 0.1)explode_night = (0, 0, 0)plt.figure(figsize=(4, 4))plt.title("전국 야간 연장 운영 비율 및 주말 운영 비율", position=(0.55, 1.7), fontsize=20)plt.pie(open_night_info, autopct='%.1f%%', textprops={'fontsize':13}, colors=colors_weekend, startangle=90, shadow=true, pctdistance=0.85, radius=2.5)plt.pie(open_weekend_info, labels=labels_weekend, textprops={'fontsize':11}, colors=colors_night, startangle=90, shadow=true,labeldistance=0.7, explode=explode_weekend, radius=1.8)plt.legend(labels_night, prop={'size':12}, loc="center", title="야간 운영")centre_circle = plt.circle((0,0), 1, color='black', fc='white', linewidth=0)fig = plt.gcf()fig.gca().add_artist(centre_circle)plt.show()labels_weekend = ['휴무', '운영', '정보없음']labels_accomodation = ['불가능', '정보없음', '가능', '불가능', '정보없음', '가능', '불가능', '정보없음', '가능']colors_weekend = ['#ffaaa5', '#d6e6f2', '#ffd3b6']colors_accomodation = ['#ffe2e2','#e0f9b5', '#fefdca', '#ffe2e2','#e0f9b5', '#fefdca', '#ffe2e2','#e0f9b5', '#fefdca']explode_weekend = (0.05, 0.05, 0.05)explode_accomodation = (0, 0, 0,0, 0, 0, 0, 0.2, 0.4)plt.figure(figsize=(4, 4))plt.title("전국 주말 운영 비율 및 숙박 가능 비율", position=(0.55, 1.6), fontsize=20)plt.pie(open_weekend_info, autopct='%.1f%%', textprops={'fontsize':13}, colors=colors_weekend, startangle=90, shadow=true, pctdistance=0.85, radius=2.5)plt.pie(accomodation_info, labels=labels_accomodation, autopct='%.1f%%', textprops={'fontsize':11}, colors=colors_night, startangle=90, shadow=true, pctdistance=0.7, labeldistance=0.85, radius=1.8, explode=explode_accomodation)plt.legend(labels_weekend, prop={'size':12}, loc="center", title="주말운영")centre_circle = plt.circle((0,0), 1, color='black', fc='white', linewidth=0)fig = plt.gcf()fig.gca().add_artist(centre_circle)plt.show()### 7.4 최근 5년 무더위쉼터 개설 건수df_shelter["개설연도"] = df_shelter["운영시작일자"].str.split("-").str[0]df_shelter["개설연도"].unique()start_2015 = len(df_shelter.loc[df_shelter["개설연도"] == "2015"])start_2016 = len(df_shelter.loc[df_shelter["개설연도"] == "2016"])start_2017 = len(df_shelter.loc[df_shelter["개설연도"] == "2017"])start_2018 = len(df_shelter.loc[df_shelter["개설연도"] == "2018"])start_2019 = len(df_shelter.loc[df_shelter["개설연도"] == "2019"])start_year = np.array([start_2015, start_2016, start_2017, start_2018, start_2019])start_yearplt.figure(figsize=(10,3))year = ['2015년', '2016년', '2017년', '2018년', '2019년']plt.plot(year, start_year, "c*--", markersize = 10, label = "쉼터 개설 수")plt.legend(loc=4)plt.ylabel("쉼터 개설 수")plt.title("연도별 무더위쉼터 개설 건수")### 7.5 무더위쉼터 이용 가능 인원 대비 선풍기/에어컨 개수x = region_sum["이용가능인원수"]y = region_sum["선풍기보유대수"]z = region_sum["에어컨보유대수"]fp1 = np.polyfit(x, y, 1)f1 = np.poly1d(fp1)fx = np.linspace(0, 280000, 1000)region_sum["오차(선풍기)"] = np.abs(y - f1(x))df_sort1 = region_sum.sort_values(by='오차(선풍기)', ascending=false)df_sort1.head()fp2 = np.polyfit(x, z, 1)f2 = np.poly1d(fp2)fz = np.linspace(0, 280000, 1000)region_sum["오차(에어컨)"] = np.abs(z - f2(x))df_sort2 = region_sum.sort_values(by='오차(에어컨)', ascending=false)df_sort2.head()plt.figure(figsize=(20, 15))plt.subplot(211)plt.scatter(x, y, c=region_sum["오차(선풍기)"], s=50)plt.plot(fx, f1(fx), ls='dashed', lw=3, color='g')for n in range(5):    plt.text(df_sort1["이용가능인원수"][n]*1.02, df_sort1["선풍기보유대수"][n]*0.98, df_sort1.index[n], fontsize=13)    plt.xlim(0, 280000)plt.ylim(0, 14500)plt.legend(['sample', '수용인원 대비 선풍기 수'], loc='upper left')plt.xlabel("이용가능 인원")plt.ylabel("선풍기 보유 수")plt.title("전국 무더위쉼터 수용인원 대비 선풍기 보유 대수", fontsize=18)plt.colorbar()plt.grid()plt.subplot(212)plt.scatter(x, z, c=region_sum["오차(에어컨)"], s=50)plt.plot(fz, f2(fz), ls='dashed', lw=3, color='m')for n in range(5):    plt.text(df_sort2["이용가능인원수"][n]*1.02, df_sort2["에어컨보유대수"][n]*0.98, df_sort2.index[n], fontsize=13)plt.xlim(0, 280000)plt.ylim(0, 10000)plt.legend(['sample', '수용인원 대비 에어컨 수'], loc='upper left')plt.xlabel("이용가능 인원")plt.ylabel("에어컨 보유 수")plt.title("전국 무더위쉼터 수용인원 대비 에어컨 보유 대수", fontsize=18)plt.colorbar()plt.grid()plt.show()