[스파르타코딩클럽] 9강. 지도학습 : 분류모델 - 로지스틱 회귀📘[SCC] 바닥부터 시작하는 머신러닝/📚[스파르타코딩클럽] 바닥부터 시작하는 머신러닝 - 3주차/📕[스파르타코딩클럽] 9강. 지도학습 : 분류모델 - 로지스틱 회귀Made with📕[스파르타코딩클럽] 9강. 지도학습 : 분류모델 - 로지스틱 회귀[수업 목표]지도학습 : 분류모델의 로지스틱 회귀에 대해 알아보고 실습을 통해 배워봅시다[목차]01. 로지스틱 회귀 개념02. 로지스틱 회귀분석 실습import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# 데이터 로드
data = load_breast_cancer()
X = data.data
y = data.target

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 데이터 스케일링
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
​sklearn.datasets.load_breast_cancer: 유방암 데이터셋 로드return_X_y=False: 데이터와 타겟을 함께 반환할지 여부. 기본값은 False입니다._X_y=False: 데이터와 타겟을 함께 반환할지 여부. 기본값은 False입니다.﻿​sklearn.model_selection.train_test_split: 데이터를 훈련 세트/ 테스트 세트로 분할test_size=0.2: 테스트 세트의 비율을 0.2로 설정합니다._size=0.2: 테스트 세트의 비율을 0.2로 설정합니다.﻿​random_state=42: 랜덤 시드 값으로, 데이터 분할의 재현성을 위해 사용됩니다._state=42: 랜덤 시드 값으로, 데이터 분할의 재현성을 위해 사용됩니다.﻿​sklearn.preprocessing.StandardScaler: 데이터의 평균을 0, 분산을 1로 스케일링fit_transform(X_train): 훈련 세트를 스케일링하고 변환합니다._transform(X_train): 훈련 세트를 스케일링하고 변환합니다.﻿​transform(X_test): 테스트 세트를 변환합니다.(X_test): 테스트 세트를 변환합니다.﻿​☑️ 모델 학습모델 학습 {5px}모델 학습 ﻿​PythonCopyfrom sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 모델 생성 및 학습
model = LogisticRegression()
model.fit(X_train, y_train)
# 예측
y_pred = model.predict(X_test)
# 평가
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(f"Classification Report:")
print(f"Confusion Matrix:")
​sklearn.linear_model.LogisticRegression: 로지스틱 회귀 모델 생성fit(X_train, y_train): 모델을 훈련 세트에 맞추어 학습시킵니다.(X_train, y_train): 모델을 훈련 세트에 맞추어 학습시킵니다.﻿​predict(X_test): 테스트 세트에 대해 예측을 수행합니다.(X_test): 테스트 세트에 대해 예측을 수행합니다.﻿​sklearn.metrics.accuracy_score: 정확도 계산accuracy_score(y_test, y_pred): 실제 값과 예측 값을 비교하여 정확도를 반환합니다._score(y_test, y_pred): 실제 값과 예측 값을 비교하여 정확도를 반환합니다.﻿​sklearn.metrics.classification_report: 분류 보고서 생성classification_report(y_test, y_pred): 정확도, 정밀도, 재현율 등의 메트릭을 포함한 보고서를 출력합니다._report(y_test, y_pred): 정확도, 정밀도, 재현율 등의 메트릭을 포함한 보고서를 출력합니다.﻿​sklearn.metrics.confusion_matrix: 혼동 행렬 생성confusion_matrix(y_test, y_pred): 실제 값과 예측 값의 혼동 행렬을 반환합니다._matrix(y_test, y_pred): 실제 값과 예측 값의 혼동 행렬을 반환합니다.﻿​2) 타이타닉 데이터☑️ 데이터 로드 및 전처리타이타닉 데이터 로드 및 전처리 {5px}타이타닉 데이터 로드 및 전처리 ﻿​PythonCopyimport seaborn as sns

# 데이터 로드
titanic = sns.load_dataset('titanic')
# 필요한 열 선택 및 결측값 처리
titanic = titanic[['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']].dropna()
# 성별과 탑승한 곳 인코딩
titanic['sex'] = titanic['sex'].map({'male': 0, 'female': 1})
titanic['embarked'] = titanic['embarked'].map({'C': 0, 'Q': 1, 'S': 2})
# 특성과 타겟 분리
X = titanic.drop('survived', axis=1)
y = titanic['survived']
# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# 데이터 스케일링
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
​seaborn.load_dataset: seaborn의 내장 데이터셋 로드’titanic’: 타이타닉 데이터셋을 로드합니다.’titanic’: 타이타닉 데이터셋을 로드합니다.﻿​ pandas.DataFrame.dropna: 결측값이 있는 행 제거pandas.DataFrame.map: 데이터 값을 다른 값으로 매핑’male’: 0, ’female’: 1: 성별을 숫자로 매핑합니다.: 성별을 숫자로 매핑합니다.}’male’: 0, ’female’: 1: 성별을 숫자로 매핑합니다.﻿​’C’: 0, ’Q’: 1, ’S’: 2: 탑승한 곳을 숫자로 매핑합니다.: 탑승한 곳을 숫자로 매핑합니다.}’C’: 0, ’Q’: 1, ’S’: 2: 탑승한 곳을 숫자로 매핑합니다.﻿​☑️ 모델 학습모델 학습 {5px}모델 학습 ﻿​PythonCopy# 모델 생성 및 학습
model = LogisticRegression()
model.fit(X_train, y_train)
# 예측
y_pred = model.predict(X_test)
# 평가
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(f"Classification Report:")
print(f"Confusion Matrix:")
​Copyright ⓒ TeamSparta All rights reserved.