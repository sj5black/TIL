판다스 심화: 멀티 인덱스와 복합 인덱스📕인공지능을 위한 파이썬 라이브러리/📘인공지능을 위한 파이썬 라이브러리 - 6주차/1️⃣판다스 심화: 멀티 인덱스와 복합 인덱스Made with1️⃣판다스 심화: 멀티 인덱스와 복합 인덱스수업 목표판다스의 멀티 인덱스와 복합 인덱스에 대해서 학습합니다.다차원 데이터의 효과적인 관리 방법에 대해서 학습합니다.목차멀티 인덱스(MultiIndex)란?멀티 인덱스 생성하기멀티 인덱스 데이터 접근하기복합 인덱스(MultiIndex) 활용멀티 인덱스의 응용요약멀티 인덱스(MultiIndex)란?📚멀티 인덱스(MultiIndex)는 하나 이상의 인덱스를 사용하여 데이터프레임의 행과 열을 구조화하는 방법입니다. 이는 다차원 데이터를 보다 효율적으로 관리하고 분석할 수 있게 해줍니다.멀티 인덱스 생성하기set_index()로 멀티 인덱스 설정여러 열을 사용해 멀티 인덱스를 설정할 수 있습니다.PythonCopyimport pandas as pd

# 예시 데이터프레임 생성
data = {
'도시': ['서울', '서울', '부산', '부산'],
'년도': [2021, 2022, 2021, 2022],
'인구수': [9700000, 9720000, 3400000, 3450000]
}
df = pd.DataFrame(data)
# '도시'와 '년도'를 멀티 인덱스로 설정
df_multi_index = df.set_index(['도시', '년도'])
print(df_multi_index)

​결과:Plain TextCopy          인구수
도시   년도
서울  2021  9700000
     2022  9720000
부산  2021  3400000
     2022  3450000

​도시와 년도가 인덱스로 설정되어, 데이터가 더 구조화된 형태로 보입니다.pd.MultiIndex.from_tuples()로 멀티 인덱스 생성from_tuples()를 사용해 튜플로 구성된 멀티 인덱스를 생성할 수도 있습니다.PythonCopy# 멀티 인덱스를 튜플로 직접 생성
index = pd.MultiIndex.from_tuples([('서울', 2021), ('서울', 2022), ('부산', 2021), ('부산', 2022)], names=['도시', '년도'])
# 데이터프레임에 적용
df_multi_index = pd.DataFrame({'인구수': [9700000, 9720000, 3400000, 3450000]}, index=index)
print(df_multi_index)

​결과:Plain TextCopy          인구수
도시   년도
서울  2021  9700000
     2022  9720000
부산  2021  3400000
     2022  3450000

​멀티 인덱스 데이터 접근하기loc[]을 사용한 데이터 접근loc[]을 사용해 멀티 인덱스에서 특정 데이터를 선택할 수 있습니다.PythonCopy# 특정 인덱스의 데이터 선택
print(df_multi_index.loc['서울'])

​결과:Plain TextCopy        인구수
년도
2021  9700000
2022  9720000

​하위 레벨까지 지정하여 데이터를 더 구체적으로 접근할 수도 있습니다.PythonCopy# '서울'의 2021년 데이터 선택
print(df_multi_index.loc[('서울', 2021)])

​결과:Plain TextCopy인구수    9700000
Name: (서울, 2021), dtype: int64

​슬라이싱(Slicing)으로 데이터 접근멀티 인덱스는 슬라이싱을 통해 특정 구간의 데이터를 쉽게 선택할 수 있습니다.PythonCopy# 부산의 모든 데이터를 선택
df_multi_index = df_multi_index.sort_index()
print(df_multi_index.loc['부산':'부산'])

​결과:Plain TextCopy          인구수
도시   년도
부산  2021  3400000
     2022  3450000

​xs()를 사용한 멀티 인덱스 교차 선택xs()는 특정 레벨에서 데이터를 선택하거나, 레벨을 넘어서 데이터를 선택할 때 유용합니다.PythonCopy# '도시' 레벨에서 '서울'의 데이터를 선택
print(df_multi_index.xs('서울', level='도시'))

​결과:Plain TextCopy        인구수
년도
2021  9700000
2022  9720000

​복합 인덱스(MultiIndex) 활용인덱스 정렬 및 정렬된 상태 확인멀티 인덱스를 사용한 데이터프레임은 정렬된 상태로 관리하는 것이 일반적입니다. sort_index()로 인덱스를 정렬할 수 있습니다.PythonCopy# 멀티 인덱스 정렬
df_sorted = df_multi_index.sort_index()
print(df_sorted)

​unstack()과 stack()으로 인덱스 변환unstack()은 멀티 인덱스를 열로 변환합니다. 반대로 stack()은 열을 인덱스로 변환합니다.PythonCopy# 멀티 인덱스를 열로 변환 (unstack)
df_unstacked = df_multi_index.unstack(level='년도')
print(df_unstacked)

​결과:Plain TextCopy         인구수
년도      2021      2022
도시
서울   9700000  9720000
부산   3400000  3450000

​*stack()**을 사용하면, 다시 인덱스로 변환할 수 있습니다.PythonCopy# 다시 인덱스로 변환 (stack)
df_stacked = df_unstacked.stack()
print(df_stacked)

​멀티 인덱스의 응용그룹화(Grouping)와 함께 사용📚멀티 인덱스는 그룹화와 함께 사용할 때 더 강력해집니다. 그룹화한 데이터를 멀티 인덱스로 변환하여 복잡한 분석을 수행할 수 있습니다.PythonCopy# 데이터프레임 생성
data = {
'도시': ['서울', '서울', '부산', '부산', '서울', '부산'],
'년도': [2021, 2022, 2021, 2022, 2021, 2022],
'인구수': [9700000, 9720000, 3400000, 3450000, 9800000, 3500000],
'소득': [60000, 62000, 45000, 46000, 63000, 47000]
}
df = pd.DataFrame(data)
# '도시'와 '년도'를 기준으로 그룹화하여 평균 계산
grouped_df = df.groupby(['도시', '년도']).mean()
print(grouped_df)

​결과:Plain TextCopy             인구수      소득
도시  년도
부산  2021  3400000  45000
     2022  3450000  46500
서울  2021  9750000  61500
     2022  9720000  62000

​요약📚요약멀티 인덱스(MultiIndex)는 하나 이상의 인덱스를 사용하여 다차원 데이터를 효율적으로 관리하는 방법입니다.멀티 인덱스는 set_index()나 from_tuples()를 사용해 생성할 수 있으며, loc[], xs(), 슬라이싱 등을 통해 데이터를 선택할 수 있습니다.복합 인덱스를 사용하면 데이터를 정렬하거나, unstack()과 stack()을 통해 인덱스를 변환하는 작업이 용이합니다.멀티 인덱스는 그룹화와 같은 복잡한 데이터 분석 작업에도 유용하게 사용됩니다.이제 멀티 인덱스를 활용하여 더 복잡하고 깊이 있는 데이터 분석을 진행해보세요! 😊